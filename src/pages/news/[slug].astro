---
import Layout from "@layouts/Layout.astro";
import List from "@components/List.astro";
import Breadcrumbs from "@components/Breadcrumbs.astro";
import ButtonCopyLink from "@components/ButtonCopyLink.astro";

import fetchApi from "@lib/strapi";
import type New from "@interfaces/new";

import getNews from "@data/getNews";

import { marked } from "marked";
import replaceQuotes from "@utils/replaceQuotes";
import formatDate from "@utils/formatDate";

export async function getStaticPaths() {
  const news = await fetchApi<New[]>({
    endpoint: "news",
    wrappedByKey: "data",
    query: { 
      "populate[0]": "blocks", 
    },
  });

  return news.map((item: New) => ({
    params: { slug: item.attributes.slug },
    props: item,
  }));
}

type Props = New;

const service = Astro.props;
const id = service.id;
const { slug, introTitle, blocks } = service.attributes;

const title = replaceQuotes(service.attributes.title);
const date = formatDate(service.attributes.date);

const introText = marked.parse(service.attributes.introText || "");

const pages = await getNews();
const otherServices = pages.filter((page) => page.slug !== slug);

type Crumb = {
  title: string;
  href?: string;
};

const breadcrumbs: Crumb[] = [
  {
    title: "Главная",
    href: "/",
  },
  {
    title: "журнал",
    href: "/news/",
  },
  {
    title: title,
  },
];

async function getPictureUrl(id: number) {
  const item = await fetchApi<New>({
    endpoint: `news/${id}`,
    wrappedByKey: "data",
    query: { 
      "populate[picture][fields][0]": "url",
    },
  });

  const url = item.attributes.picture.data.attributes.url;

  return url;
}

const pictureUrl = await getPictureUrl(id);

import { getImage } from "astro:assets";

const desktopImg = await getImage({
    src: `${import.meta.env.PUBLIC_STRAPI_URL}${pictureUrl}`,
    format: "jpeg, webp",
    width: 920,
    height: 560,
});
---

<Layout title={title}>
  <section class="section">
    <h2 class="title">{title}</h2>
    <div class="page">
      <Breadcrumbs breadcrumbs={breadcrumbs} />
      <div class="page-content">
        <div class="page-blocks">
          {
            date && (
              <div class="page-block">
                <div class="page-block-title">{date}</div>
              </div>
            )
          }
          {
            introText && (
              <div class="page-block">
                <div class="page-block-title">{introTitle}</div>
                <div class="page-block-text" set:html={introText} />
              </div>
            )
          }

          {
            pictureUrl && (
              <div class="page-block">
                <div class="page-image">
                  <img src={desktopImg.src} alt={title} />
                </div>
              </div>
            )
          }

          {
            blocks.map((item) => (
              <div class="page-block">
                <div class="page-block-title">{item.title}</div>
                <div class="page-block-text" set:html={marked.parse(item.text)} />
              </div>
            ))
          }

          <ButtonCopyLink />
        </div>
      </div>
    </div>
  </section>

  <section class="section">
    <h2 class="title">Другие новости</h2>
    <List list={otherServices} />
  </section>
</Layout>
