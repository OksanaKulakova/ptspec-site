---
import Layout from "@layouts/Layout.astro";
import ServiceLayout from "@layouts/ServiceLayout.astro";
import List from "@components/List.astro";
import Breadcrumbs from "@components/Breadcrumbs.astro";

import fetchApi from "@lib/strapi";
import type Service from "@interfaces/service";

import getServises from "@data/getServices";

// const pages = await getServises("en");

// export async function getStaticPaths() {
//   const services = await fetchApi<Service[]>({
//     endpoint: "services",
//     wrappedByKey: "data",
//     query: {
//       "locale": "en",
//     },
//   });

//   return services.map((service) => ({
//     params: { slug: service.attributes.slug },
//     props: service,
//   }));
// }

// type Props = Service;

// const service = Astro.props;
// const { title, slug } = service.attributes;

// const otherServices = pages.filter((page) => page.slug !== slug);

export const prerender = false;

const { slug } = Astro.params;

let service: Service;

try {
  service = await fetchApi<Service>({
    endpoint: 'services',
    wrappedByKey: 'data',
    wrappedByList: true,
    query: {
      'locale': 'en',
      'filters[slug][$eq]': slug || '',
    },
  });

} catch (error) {
  return Astro.redirect('/en/404');
}

if (!service) return Astro.redirect('/en/404');

const { title } = service.attributes;

const pages = await getServises('en');
const otherServices = pages.filter((page) => page.slug !== slug);

type Crumb = {
  title: string;
  href?: string;
};

const breadcrumbs: Crumb[] = [
  {
    title: "Home",
    href: "/en/",
  },
  {
    title: "Services",
    href: "/en/services/",
  },
  {
    title: title,
  },
];
---

<Layout title={title}>
  <section class="section">
    <h1 class="page-title">{title}</h1>
    <div class="page">
      <Breadcrumbs breadcrumbs={breadcrumbs} />
      <ServiceLayout service={service} />
    </div>
  </section>

  <section class="section">
    <h2 class="title">Other services</h2>
    <List list={otherServices} />
  </section>
</Layout>
