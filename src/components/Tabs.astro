---
interface Props {
  title: string;
  tab1: string;
  tab2: string;
}

const { title, tab1, tab2 } = Astro.props;
---

<script>
  const tab: NodeListOf<Element> = document.querySelectorAll(".header-tab");
  const tabContent: NodeListOf<Element> =
    document.querySelectorAll(".tabcontent");

  function hideTabContent(a: number): void {
    for (let i: number = a; i < tabContent.length; i++) {
      tabContent[i].classList.remove("show");
      tabContent[i].classList.add("hide");
    }
  }

  function showTabContent(b: number): void {
    if (tabContent[b].classList.contains("hide")) {
      tabContent[b].classList.remove("hide");
      tabContent[b].classList.add("show");
    }
  }

  hideTabContent(1);

  document.querySelector(".tab").addEventListener("click", (event: Event) => {
    let target: Element = event.target as Element;

    if (target && target.classList.contains("header-tab")) {
      for (let i: number = 0; i < tab.length; i++) {
        if (target == tab[i]) {
          hideTabContent(0);
          showTabContent(i);
          break;
        }
      }
    }
  });
</script>

<section class="section">
  <h2 set:html={title} class="title" />

  <div class="tab">
    <div class="header">
      <div class="header-tab">{tab1}</div>
      <div class="header-tab">{tab2}</div>
    </div>
    <div class="tabcontent">
      <slot name="tabcontent-1"/>
    </div>
    <div class="tabcontent">
      <slot name="tabcontent-2"/>
    </div>
  </div>
</section>

<style>
  .header-tab {
    width: 100%;
    height: 56px;
    cursor: pointer;
  }
  .tabcontent.hide {
    display: none;
  }
  .tabcontent.show {
    display: block;
  }

  @media screen and (min-width: 1024px) {
    .header {
      display: flex;
      gap: 16px;
    }
  }
</style>
