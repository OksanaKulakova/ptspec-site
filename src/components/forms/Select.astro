---
interface Props {
  id: number;
  name: string;
  list: Array<Option>;
}

interface Option {
  title: string;
  slug: string;
}

const { id, name, list } = Astro.props;

import ModalSmall from "@components/ModalSmall.astro";
---

<script>
  class AstroSelect extends HTMLElement {
    constructor() {
      super();

      const input: HTMLInputElement = this.querySelector(".input");
      const items: NodeListOf<HTMLElement> =
        this.querySelectorAll(".select-list-item");

      const text = items[0].innerText;
      input.value = text;

      const list: HTMLElement | null = this.querySelector(".select-list");

      function toggleOpenList(): void {
        list.classList.toggle("select-list--open");
      }

      const btnOpen: HTMLElement = this.querySelector(".select-button-open");
      btnOpen.childNodes[0].textContent = text;

      btnOpen?.addEventListener("click", (event: Event) => {
        event.preventDefault();
        const width: number = window.innerWidth;

        if (width >= 1024) {
          toggleOpenList();
        }
      });

      const elements: NodeListOf<HTMLElement> =
        this.querySelectorAll(".select-list-item");

      elements.forEach((el: HTMLElement) => {
        if (el.innerText === text) {
          el.classList.add("select-list-item--active");
        }
      });

      function deleteActiveClass(): void {
        elements.forEach((el: HTMLElement) => {
          el.classList.remove("select-list-item--active");
        });
      }

      elements.forEach((el: HTMLElement) => {
        el.addEventListener("click", (event: Event) => {
          event.preventDefault();
          deleteActiveClass();

          let target: HTMLElement = event.target as HTMLElement;

          const text = target.innerText;
          input.value = text;
          btnOpen.childNodes[0].textContent = text;

          elements.forEach((el: HTMLElement) => {
            if (el.innerText.toLowerCase() == text.toLowerCase()) {
              el.classList.add("select-list-item--active");
            }
          });

          toggleOpenList();
        });
      });
    }
  }

  customElements.define("astro-select", AstroSelect);
</script>

<astro-select>
  <div class="select-container">
    <input class="input" type="hidden" name={name} />
    <button
      class="select-button select-button-open button-open-modal"
      data-modal-id={id}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
      >
        <path d="M15 6L9 12L15 18V6Z" fill="#161619"></path>
      </svg>
    </button>

    <div class="select-list">
      {
        list.map((item: Option) => (
          <div class="select-list-item">{item.title}</div>
        ))
      }
    </div>
  </div>

  <ModalSmall id={id}>
    <div class="select-container-mobile">
      <div class="select-list-mobile">
        {
          list.map((item: Option) => (
            <div class="select-list-item">{item.title}</div>
          ))
        }
      </div>
      <div class="select-block-mobile-bottom"></div>
    </div>
  </ModalSmall>
</astro-select>

<style>
  astro-select {
    width: 100%;
  }

  .select-container {
    position: relative;
    width: 100%;
    cursor: pointer;
  }

  .select-input {
    position: relative;
  }

  .select-input .input {
    width: 100%;
    cursor: pointer;
  }

  .select-button {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    height: 56px;
    color: #161619;
    font-size: 16px;
    line-height: 24px;
    letter-spacing: -0.48px;
    text-transform: uppercase;
  }

  .select-button::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 1px;
    background-color: #161619;
  }

  .select-button svg {
    pointer-events: none;
  }

  .select-list {
    display: none;
  }

  .select-list-item {
    padding: 16px;
  }

  .select-list-item:hover {
    background-color: #fe5639;
    color: #faf8f8;
    cursor: pointer;
  }

  .select-list-item--active {
    color: #fe5639;
  }

  .select-block-mobile-bottom {
    position: sticky;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 32px;
    background-color: #faf8f8;
  }

  @media screen and (min-width: 688px) {
    .select-list {
      display: none;
      position: absolute;
      top: 55px;
      left: 0;
      width: 100%;
      max-height: 320px;
      background-color: #faf8f8;
      padding: 16px 0;
      outline: 1px solid #161619;
      outline-offset: -1px;
      overflow-y: auto;
      z-index: 5;
    }

    .select-list--open {
      display: block;
    }

    .modal {
      display: none;
    }
  }

  @media screen and (min-width: 1921px) {
    .select-button {
      height: 7vh;
      font-size: 2vh;
      line-height: 3vh;
      letter-spacing: -0.06vw;
    }

    .select-list {
      top: 6.875vh;
      max-height: 40vh;
      padding: 2vh 0;
      outline: 0.125vh solid #161619;
      outline-offset: -0.125vh;
    }

    .select-list-item {
      padding: 2vh;
    }
  }
</style>
