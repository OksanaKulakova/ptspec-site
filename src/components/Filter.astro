---
interface Props {
  filters: Array<Filter>;
}

type Filter = {
  id: number;
  title: string;
  count: number;
};

const { filters } = Astro.props;

import ModalSmall from "./ModalSmall.astro";
---

<script>
  class AstroFilter extends HTMLElement {
    constructor() {
      super();

      const container: HTMLElement | null =
        this.querySelector(".filter-container");
      const filter: HTMLElement | null = this.querySelector(".filter-main");

      window.addEventListener("scroll", () => {
        const top: number = filter.getBoundingClientRect().top;

        if (top <= 56) {
          container.classList.add("filter-container--fixed");
        } else {
          container.classList.remove("filter-container--fixed");
        }
      });

      const list: HTMLElement | null = this.querySelector(".filter-list");
      const btnOpen: HTMLElement | null = this.querySelector(
        ".filter-button-open",
      );
      const btnReset: NodeListOf<Element> = this.querySelectorAll(
        ".filter-button-reset",
      );

      function toggleOpenList(): void {
        list.classList.toggle("filter-list--open");
      }

      function closeOpenList(): void {
        list.classList.remove("filter-list--open");
      }

      btnOpen?.addEventListener("click", (event: Event) => {
        event.preventDefault();
        const width: number = window.innerWidth;

        if (width >= 1024) {
          toggleOpenList();
        }
      });

      const elements: NodeListOf<Element> =
        this.querySelectorAll(".filter-list-item");

      function deleteActiveClass(): void {
        elements.forEach((el: Element) => {
          el.classList.remove("filter-list-item--active");
        });
      }

      function resetFilter(): void {
        deleteActiveClass();
        btnOpen.classList.remove("filter-button--active");
        btnOpen.childNodes[0].textContent = "Фильтровать по услуге";

        btnReset.forEach((btn: Element) => {
          btn.setAttribute("disabled", "true");
        });

        closeOpenList();
      }

      elements.forEach((el: Element) => {
        el.addEventListener("click", (event: Event) => {
          event.preventDefault();
          deleteActiveClass();

          let target: HTMLElement = event.target as HTMLElement;

          const text = target.innerText;

          elements.forEach((el: HTMLElement) => {
            if (el.innerText.toLowerCase() == text.toLowerCase()) {
              el.classList.add("filter-list-item--active");
            }
          });

          btnOpen.classList.add("filter-button--active");
          btnOpen.childNodes[0].textContent = text;

          btnReset.forEach((btn: Element) => {
            btn.removeAttribute("disabled");
          });
        });
      });

      btnReset.forEach((btn: Element) => {
        btn.addEventListener("click", (event: Event) => {
          event.preventDefault();
          resetFilter();
        });
      });
    }
  }

  customElements.define("astro-filter", AstroFilter);
</script>

<astro-filter>
  <div class="filter-main">
    <div class="filter-container">
      <div class="filter-wrapper">
        <div class="filter">
          <div class="filter-block">
            <button class="filter-button filter-button-open button-open-modal">
              Фильтровать по услуге
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
              >
                <path d="M15 6L9 12L15 18V6Z" fill="#161619"></path>
              </svg>
            </button>
          </div>
          <div class="filter-block">
            <button disabled class="filter-button filter-button-reset">
              Сбросить фильтр
            </button>
          </div>
        </div>

        <div class="filter-list">
          {
            filters.map((f: Filter) => (
              <div class="filter-list-item">
                {f.title} / {f.count}
              </div>
            ))
          }
        </div>

        <ModalSmall>
          <div class="filter-container-mobile">
            <div class="filter-list-mobile">
              {
                filters.map((f: Filter) => (
                  <div class="filter-list-item">
                    {f.title} / {f.count}
                  </div>
                ))
              }
            </div>
            <div class="filter-block-mobile-bottom">
              <button disabled class="filter-button filter-button-reset">
                Сбросить фильтр
              </button>
            </div>
          </div>
        </ModalSmall>
      </div>
    </div>
  </div>
</astro-filter>

<style>
  .filter-main {
    height: 56px;
  }
  .filter-container {
    height: 56px;
    background-color: #faf8f8;
  }

  .filter-container--fixed {
    position: fixed;
    width: calc(100% - 32px);
    top: 56px;
    z-index: 10;
  }

  .filter-wrapper {
    position: relative;
  }

  .filter-wrapper::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background-color: #161619;
  }

  .filter-container--fixed .filter-wrapper::before {
    content: "";
    position: absolute;
    bottom: -1px;
    left: 0;
    width: 100%;
    height: 1px;
    background-color: #161619;
  }

  .filter::after {
    content: "";
    position: absolute;
    top: 0;
    left: -16px;
    width: calc(100% + 32px);
    height: 100%;
    background-color: #faf8f8;
    z-index: -1;
  }

  .filter-block {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    padding: 16px 0;
  }

  .filter-block:last-child {
    display: none;
  }

  .filter-button {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: auto;
    color: #161619;
    font-size: 16px;
    line-height: 24px;
    letter-spacing: -0.48px;
    text-transform: uppercase;
  }

  .filter-button-reset {
    text-decoration: underline;
  }

  .filter-button--active {
    color: #fe5639;
  }

  .filter-button:disabled,
  .filter-button[disabled] {
    opacity: 0.25;
    cursor: default;
  }

  .filter-button svg {
    pointer-events: none;
  }

  .filter-list {
    display: none;
  }

  .filter-list-item {
    padding: 16px;
  }

  .filter-list-item:hover {
    background-color: #fe5639;
    color: #faf8f8;
    cursor: pointer;
  }

  .filter-list-item--active {
    color: #fe5639;
  }

  .filter-container-mobile {
    height: 504px;
    padding-bottom: 32px;
  }

  .filter-block-mobile-bottom {
    position: sticky;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 88px;
    padding-top: 16px;
    padding-bottom: 48px;
    background-color: #faf8f8;
  }

  @media screen and (min-width: 1024px) {
    .filter-container--fixed {
      width: calc(100% - 64px);
    }

    .filter {
      display: flex;
    }

    .filter::after {
      left: -32px;
      width: calc(100% + 64px);
    }

    .filter-block:first-child {
      position: relative;
      width: calc(50% - 8px);
    }

    .filter-block:first-child::after {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      width: 1px;
      height: 100%;
      background-color: #161619;
    }

    .filter-block:last-child {
      display: flex;
      width: calc(50% + 8px);
    }

    .filter-list {
      display: none;
      width: calc(50% - 8px);
      height: 321px;
      background-color: #faf8f8;
      padding: 16px 0;
      outline: 1px solid #161619;
      outline-offset: -1px;
      overflow-y: auto;
    }

    .filter-list--open {
      display: block;
      position: absolute;
      top: 56px;
      z-index: 10;
    }

    .modal {
      display: none;
    }
  }
</style>
