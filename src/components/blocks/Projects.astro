---
import List from "@components/List.astro";
import Filter from "@components/Filter.astro";

import fetchApi from "@lib/strapi";
import type Service from "@interfaces/service";

import getProjects from "@data/getProjects";
const projects = await getProjects();

const count = projects.length;

const services = await fetchApi<Service[]>({
  endpoint: "services",
  wrappedByKey: "data",
  query: {
    "fields[0]": "title",
    "fields[1]": "slug",
    "populate[projects][fields][0]": "title",
    "populate[projects][fields][1]": 'slug',
    "sort[0]": "id",
  },
});

const filters = services.map((item: Service) => ({
  id: item.id,
  title: item.attributes.title,
  count: Number(item.attributes.projects.data.length),
  projects: item.attributes.projects.data.map((item) => ({
    id: item.id,
    title: item.attributes.title,
    href: `/projects/${item.attributes.slug}/`,
  }))
}));

---

<script>
  class AstroFilterContent extends HTMLElement {
    constructor() {
      super();

      const btnOpen: HTMLElement | null = this.querySelector(".filter-button-open");

      const elements: NodeListOf<HTMLElement> = this.querySelectorAll(".filter-content");

      const countElement: HTMLElement | null = document.querySelector("#count");

      const hideElements = (): void => {
        elements.forEach((el: HTMLElement) => {
          el.style.display = "none";
        });
      }

      const showElement = (id: string): void => {
        elements.forEach((el: HTMLElement) => {
          if (el.dataset.filterId === id) {
            el.style.display = "block";
            const count = el.dataset.count;
            countElement.innerText = count;
          }
        }); 
      }

      let observer = new MutationObserver((mutationRecords: MutationRecord[]) => {
        const filterId: string | undefined = btnOpen.dataset.filterId;
        hideElements();

        if (filterId) {
          showElement(filterId);
        }
      });

      observer.observe(btnOpen, {
        attributes: true,
      });
    }
  }

  customElements.define("astro-filter-content", AstroFilterContent);
</script>

<h2 class="title">ПРОЕКТЫ / <span id="count">{count}</span></h2>

<astro-filter-content>
  <Filter filters={filters} />

  <div class="filter-content" data-filter-id="0" data-count={count}>
    <List list={projects} />
  </div>

  {
    filters.map((item) => (
      <div class="filter-content" data-filter-id={item.id} data-count={item.count}>
        <List list={item.projects} />
      </div>
    ))
  }
</astro-filter-content>

<style>
  .filter-content[data-filter-id="0"] {
    display: block;
  }

  .filter-content {
    display: none;
  }
</style>
