---
interface Props {
  title: string;
  cards: Array<Card>;
}

interface Card {
  name: string;
  position: string;
  imagePath: string;
}

const { title, cards } = Astro.props;

import TeamCard from "@components/TeamCard.astro";
---

<script>
  import { register } from "swiper/element/bundle";
  register();

  class AstroSwiper extends HTMLElement {
    constructor() {
      super();

      const swiperEl = this.querySelector('swiper-container');

      const swiperParams = {
        slidesPerView: 'auto',
        spaceBetween: 16,
      };

      Object.assign(swiperEl, swiperParams);

      swiperEl.initialize();
    }
  }

  customElements.define("astro-swiper", AstroSwiper);
</script>

<section class="team">
  <h2 set:html={title} class="team-title title" />

  <div class="team-cards">
    {
      cards.map((card: Card) => (
        <TeamCard
          imagePath={card.imagePath}
          name={card.name}
          position={card.position}
        />
      ))
    }
  </div>

  <astro-swiper>
    <swiper-container init="false">
      {
        cards.map((card: Card) => (
          <swiper-slide>
            <TeamCard
              imagePath={card.imagePath}
              name={card.name}
              position={card.position}
            />
          </swiper-slide>
        ))
      }
    </swiper-container>
  </astro-swiper>
</section>

<style>
  .team {
    display: flex;
    flex-direction: column;
    gap: 16px;
    padding: 48px 0;
  }

  .team-title {
    padding: 0 16px;
  }

  .team-cards {
    display: none;
  }

  astro-swiper {
    display: block;
    margin-left: 16px;
  }

  swiper-slide {
    width: 296px!important;
  }

  @media screen and (min-width: 1025px) {
    .team {
      gap: 32px;
      padding: 96px 32px;
    }

    .team-title {
      padding: 0;
    }

    .team-cards {
      display: flex;
      gap: 32px 16px;
      flex-flow: row wrap;
      align-items: flex-start;
    }

    astro-swiper {
      display: none;
    }
  }
</style>
